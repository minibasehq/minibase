services:
  postgres:
    container_name: ${APPNAME:?error}-postgres
    image: postgres:17
    restart: unless-stopped
    volumes:
      - $HOME/data/${APPNAME:?error}:/var/lib/postgresql/data:Z
      - ./postgres/init/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/
    networks:
      - app
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: app

  openresty:
    container_name: ${APPNAME:?error}-openresty
    image: openresty/openresty:1.21.4.1-0-bullseye-fat
    restart: unless-stopped
    ports:
      - ${OPENRESTY_PORT:?error}:80
    networks:
      - app

  postgrest:
    container_name: ${APPNAME:?error}-postgrest
    image: postgrest/postgrest:v12.2.8
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app
    environment:
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY}
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@${APPNAME:?error}-postgres:5432/app
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_JWT_SECRET: ${JWT_SECRET}

networks:
  app:
    driver: bridge
    name: ${APPNAME:?error}
