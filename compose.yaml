services:
  postgres:
    image: postgres:17
    networks: [app]
    volumes:
      - $HOME/data/${APPNAME:?error}:/var/lib/postgresql/data:Z
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    command: postgres -c custom.authenticator_password=$PG_AUTHENTICATOR_PASSWORD
    environment:
      POSTGRES_USER: $PG_USER
      POSTGRES_PASSWORD: $PG_PASS
      POSTGRES_DB: app # This is one database to be created, others are in init-scripts
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", $PG_USER, "-h", "localhost", "-d", "app"]
      interval: 5s
      timeout: 5s
      retries: 10

  postgrest:
    image: postgrest/postgrest:v12.2.8
    networks: [app]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGRST_APP_SETTINGS_JWT_EXP: $JWT_EXPIRY
      PGRST_APP_SETTINGS_JWT_SECRET: $JWT_SECRET
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_SCHEMAS: api
      PGRST_DB_URI: postgres://authenticator:${PG_AUTHENTICATOR_PASSWORD}@postgres:5432/app
      PGRST_DB_USE_LEGACY_GUCS: false
      PGRST_JWT_SECRET: $JWT_SECRET

  caddy:
    image: caddy:2
    networks: [app]
    depends_on: [postgrest]
    ports:
      - $CADDY_PORT:80
      - 443:443
    volumes:
      - $HOME/caddy_data/${APPNAME:?error}:/data
      - $HOME/caddy_config/${APPNAME:?error}:/config

networks:
  app:
    name: ${APPNAME:?error}
    driver: bridge
